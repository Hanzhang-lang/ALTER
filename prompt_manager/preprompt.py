from langchain.prompts.prompt import PromptTemplate

Zero_shot_prompt = PromptTemplate(input_variables=["table", "claim", "aug"], 
                                  template="""
Below is a subtable with columns filtered, you are required to infer the data distribution and format from the sample data of the sub-table. Carefully analyze the query, based on the augmentation information, you need to verify whether the provided claim/query are true or false. Return 0 if it's false, or 1 if it's true. Only return 0 or 1 without any other information. 
sub-table: {table}
Query: {claim}
Extra information: {aug}
Output: """
)

#TODO: support mysql, sqlite
row_instruction = PromptTemplate(input_variables=["table", "claim", "aug"], 
                                 template="""
Our ultimate goal is to answer query based on the table. Below is a sub-table with columns filtered, you are required to infer the data distribution and format from the sample data of the sub-table. Carefully analyze the query, based on the augmentation information, write a SQLITE3 SELECT SQL statement using table DF that complete query. Output SQL directly with no explanation.
sub-table: {table}
Extra table information: {aug}
Query: {claim}
SQL: """)

view_instruction = PromptTemplate(input_variables=["table", "claim", "aug"], 
                                 template="""
Our ultimate goal is to answer query based on the table. Below is a subtable with columns filtered, you are required to infer the data distribution and format from the sample data of the sub-table. Carefully analyze the query, based on the augmentation information and data in subtable, write an CREATE VIEW named DF using SQL statement to include useful information about the query.
sub-table: {table}
Query: {claim}
Extra information: {aug}
SQL: """)

instructions = {"tabfact": "Task: verify whether the provided claim/query is true or false, return 0 if it's false, or 1 if it's true. Please think step by step and only return 0 or 1 without any other information at last.",
                "sqa": "Task: answer the last question given in the query. Only return the string instead of other format information. Do not repeat the question."}

answer_instruction = PromptTemplate(input_variables=["SQL", "table", "claim"], 
                                    template="""
Below is a sub-table generated by excuting the SQL. You need to understand the logic behind the SQL filtering and complete task using the final sub-table. 
SQL Excuted: 
```{SQL}```
Sub-table: {table}
Query: {claim}
""" + instructions['tabfact'])

extra_answer_instruction = PromptTemplate(input_variables=["SQL", "table", "claim"], 
                                    template="""Below is a sub-table generated by excuting the SQL. You need to understand the logic behind the SQL filtering and complete task using the final sub-table. 
SQL Excuted: 
```{SQL}```
Sub-table: {table}
Query: {claim}
Please provide a clear, concise statement in response to the question. If you cannot answer the question based on the sub-table, just say 'Cannot get answer from sub-table' without explanation.""" )

muilti_answer_instruction = PromptTemplate(input_variables=["information", "claim"], 
template="""You are a brilliant table executor with the capabilities information retrieval, table parsing, table partition and semantic understanding who can understand the structural information of the table.
Below is a sub-table generated by excuting the corresponding SQL. You need to understand the logic behind the SQL filtering. Complete task with the help of extra information below.
SQL Excuted: 
```{SQL}```
Sub-table: {table}
Extra information: {information}
Query: {query}
verify whether the provided claim/query is true or false, return 0 if it's false, or 1 if it's true. Please think step by step and return 0/1 at last.
""" )



# answer_instruction = PromptTemplate(input_variables=["table", "claim"], template=
# """
# Below is a sub-table generated by excuting the SQL.
# SQL Excuted:
# ```{SQL}```
# Sub-table: {table}

# You need to understand the logic behind the SQL filtering and use the final subset to verify whether the provided claim/query is true or false, return 0 if it's false, or 1 if it's true. Only return 0 or 1 without any other information.
# Output your thought below:
# Query: {claim}
# """)
