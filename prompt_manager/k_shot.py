from data_loader import TableFormat, TableLoader
from langchain_openai import ChatOpenAI, OpenAI
from langchain_core.messages import HumanMessage
from langchain.prompts.prompt import PromptTemplate
from langchain.prompts.few_shot import FewShotPromptTemplate


def get_k_shot_with_answer_wiki(k: int = 1):
    sqls = ["SELECT DISTINCT Type FROM DF WHERE Type != 'audio';"
            ]
    thoughts = ["Based on the SQL query and the extra information provided, the types include audio or video. Therefore, other than audio, the payload type is video."]
    tables = ['<table>\n<thead>\n<tr><th> Type </th></tr>\n</thead>\n<tbody>\n<tr><td>video   </td></tr>\n<tr><td>audio/video   </td></tr>\n</tbody>\n</table>']
    claims = ["other than audio, what type of payload types are there?"]
    extras = ["The payload types for audio include audio, video, and audio/video."]
    examples_prompt = PromptTemplate(input_variables=["SQL", "table", "information",  "claim", "thought", "output"], template="""
SQL Excuted: 
```{SQL}```
Sub-table: {table}
Extra information:
{information}

Query: {claim}
Thought: {thought}
Answer: {output}
        """)
    examples_dict = dict(zip(["SQL", "table", "information",  "claim", "thought", "output"], [
                         sqls[0], tables[0], extras[0], claims[0], thoughts[0], 'video']))
    prompt_template = FewShotPromptTemplate(
        examples=[examples_dict],
        example_prompt=examples_prompt,
        prefix="""Below is a sub-table generated by excuting the corresponding SQL. You need to understand the logic behind the SQL filtering. Think step by step and answer the question given in the query.
You should output in the following format:
Thought: your step by step thought
Answer: Only return the concise string instead of other format information. Do not repeat the question.
Below is an example.""",
        suffix="""
SQL Excuted: 
```{SQL}```
Sub-table: {table}
Extra information:
{information}

Query: {query}""",
        input_variables=["table", "query", "SQL", "information"],
    )
    return prompt_template


def get_k_shot_with_aug_wiki(k: int = 2):
    table_loader = TableLoader(
        table_name='wikitable', split='train', use_sample=True, small_test=False)
    examples_dict = []
    examples_dict.extend([{"table": '<table>\n<caption>Hoot Kloot</caption>\n<thead>\n<tr><th> Number</th><th> Title</th><th> Directed_by_</th><th> Released_</th></tr>\n</thead>\n<tbody>\n<tr><td>1  </td><td>"Kloot\'s Kounty"           </td><td>Hawley Pratt  </td><td>1973       </td></tr>\n<tr><td>2  </td><td>"Apache on the County Seat"</td><td>Hawley Pratt  </td><td>1973       </td></tr>\n<tr><td>6  </td><td>"Mesa Trouble"       </td><td>Sid Marcus </td><td>1974       </td></tr>\n</tbody>\n</table>',
                           "claim": table_loader.dataset[95]['question'],
                           "aug": "The table contains information about the Hoot Kloot animated series, including the episode number, title, director, and release year. \n1. Number: The episode number in the series \n2. Title: The title of the episode \n3. Directed_by_: The director of the episode \n4. Released_: The release year of the episode",
                           "linking": "the last title -> Released_, the last title-> Number, title -> Title, sid marcus -> Directed_by_",
                           "output": "Released_, Number, Title, Directed_by_"}])
    examples_prompt = PromptTemplate(input_variables=["table", "aug", "claim", "output", "linking"], template="""
    Table: {table}
    Extra information: {aug}
    
    Query: {claim}
    Column linking: {linking}
    Columns: {output}""")
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""
    Based on the Table below, your task is accurately output columns related to the query or contain useful information about the query. This process involves linking similar words or semantically similar terms to columns in the Table.
    Approach this task as follows:
    Read the query and extra information thoroughly and list every possible link from query term to column in the Table. 
    Then Based on the column linking, output all useful columns at last. Make sure all columns in the link step are included and every column is in the Table.""",
        suffix="""
    Table: {table}
    Extra information: {aug}
    
    Query: {claim}""",
        input_variables=["table", "claim", "aug"],
    )
    return prompt_template


def get_k_shot_with_aug(k: int = 2):
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)

    inds = [3, 6, 260, 33]
    Output_examples = [
        'team, goals_for',
        'year, game, platform_s',
        'name, population_density_km_2_, population_2011_census_'
        'leading_scorer, score, date']
    linking_examples = ['the team -> team; the most goal for -> goals_for',
                        'gamecube -> platform_s; gamecube game -> game; the first 3 year -> year;',
                        'alberta -> name; population density -> population_density_km_2_; 4257744 less people -> population_2011_census_; 2011 -> population_2011_census_'
                        'jason richardson -> leading_scorer; leading scorer -> score; month -> date; 23 point per game -> leading_scorer'
                        ]
    examples_prompt = PromptTemplate(input_variables=["table", "claim", "output", "linking"], template="""
    Table: {table}
    Claim: {claim}
    Column linking: {linking}
    Columns: {output}""")
    num_k = 3
    examples_dict = [{"table": TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_nl_sep(table_loader.dataset[inds[i]]['table']['caption']),
                      "claim": table_loader.dataset[inds[i]]['statement'],
                      "linking": linking_examples[i],
                      # "summary": summary_examples[i],
                      "output": Output_examples[i]} for i in range(num_k)]
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        suffix="""
    Table: {table}
    Claim: {claim}
    Column linking:
    """,
        input_variables=["table", "claim"],
    )
    return prompt_template


def get_k_shot_with_string(k: int = 1):
    Output_examples = [
        """
1. goal: sequential number like 1, 2, 3...
2. date: date in the format of Month Day, Year
3. venue: venue in the format of location, city, country
4. score: score number in the format of X-Y
5. result: result number in the format of X-Y
6. competition: competition name or friendly
7. nation: nation name with abbreviation within parentheses"""]
    examples_prompt = PromptTemplate(input_variables=["table", "claim", "summary", "output"], template="""
Table: {table}
Output: {example}""")
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=False)
    example_data = TableFormat(format='none', data=table_loader.dataset[20]).get_sample_data().iloc[:, [
        0, 1, 2, 3, 5]].reset_index(drop=True)
    example_data['nation'] = TableFormat(
        format='none', data=table_loader.dataset[130]).get_sample_data().iloc[:, 1].reset_index(drop=True)
    examples_dict = [{"table": TableFormat.format_html(example_data),
                      "example": Output_examples[i]} for i in range(k)]
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""
Below is a subtable with rows sampled, your task is to summarize and synthesize each column in the table, identifying commonalities in the string representations, and ultimately output string format commanalities for each column.
The example is below:""",
        suffix="""
Table: {table}
Output: """,
        input_variables=["table"],
    )
    return prompt_template


def get_k_shot_with_schema_linking(k: int = 2):
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)

    inds = [3, 6]
    Output_examples = [
        'team, goals_for',
        'year, game, platform_s']
    linking_examples = ['the team -> team; the most goal for -> goals_for',
                        'gamecube -> platform_s; gamecube game -> game; the first 3 year -> year;'
                        ]
    examples_prompt = PromptTemplate(input_variables=["table", "claim", "output", "linking"], template="""
    Table: {table}
    Claim: {claim}
    Column linking: {linking}
    Columns: {output}""")
    num_k = 2
    examples_dict = [{"table": TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(table_loader.dataset[inds[i]]['table']['caption']),
                      "claim": table_loader.dataset[inds[i]]['statement'],
                      "linking": linking_examples[i],
                      # "summary": summary_examples[i],
                      "output": Output_examples[i]} for i in range(num_k)]
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""
    Your task is accurately output columns related to the query or contain useful information about the query. This process involves linking relevant columns in the table on the terms in the query.
    Approach this task as follows:
    Read the question thoroughly and list every possible link from query term to column in Table.
    Based on the linking columns, output all useful columns at last. Make sure all columns in the link step are included and every column is in the Table.
    """,
        # You are a brilliant table executor with the capabilities information retrieval, table parsing, table partition and semantic understanding who can understand the structural information of the table.
        # Given the following table and query, you should output columns related to the query or contain useful information about the query.
        # Here are some examples:""",
        suffix="""
    Table: {table}
    Claim: {claim}
    Extra information: {aug}
    """,
        input_variables=["table", "claim", "aug"],
    )
    return prompt_template


def get_step_back_prompt():
    query_examples = [
        # "the country of ecuador be the only country that use the us dollar (usd) as its currency , and the central bank be the federal reserve",
        "only 1 of the college list be public , and it be in new orleans"]
    inds = [8]
    num_k = 1
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)
    examples = [TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(
        table_loader.dataset[inds[i]]['table']['caption']) for i in range(num_k)]
    new_query_examples = [
        # "Which country uses the US dollar as its currency and has the Federal Reserve as its central bank?",
        "which college list be public?",
        #   "what is the number of listings from barrington?; what is the number of listings from farmington?; what is the number of listings from rochester combined?",
    ]
    examples_prompt = PromptTemplate(input_variables=["query", "new_query"], template="""
    Query: {query}
    Sub-Table: {table}
    new_query: {new_query}""")

    examples_dict = [{"query": query_examples[i],
                      "table": examples[i],
                      "new_query": new_query_examples[i]} for i in range(num_k)]
    step_back_prompt = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""Based on the table, your task is to step back and paraphrase a question to a more generic step-back question, which is easier to answer.""",
        suffix="""
    Query: {query}
    Sub-Table: {table}
        """,
        input_variables=["query", "table"],
    )

    return step_back_prompt


def get_decompose_prompt():
    query_examples = [
        # "after 2005 , the winner of the lifetime achievement award be andrew rule john silvester , sandra harvey lindsay simpson , marele day , shane maloney , and peter doyle",
        "all 12 club play a total of 22 game for the wru division one east",
        #   "a gamecube game loss the award in each of the first 3 year",
        "from 1980 to 2011 , apoel bc lose more than 2 time as many game as it win",
        "polona hercog 1890partner with alberta brianti after she have stephanie vogt as the partner",
    ]
    task_examples = ["query rewrite",
                     "query decompose", "query ambiguity resolve"]
    new_query_examples = [
        # "Who were the winners of the lifetime achievement award after 2005?;",
        "How many clubs play for the wru division one east in total?; How many clubs play 22 game for the wru division one east?;",
        #   "a gamecube game loss the award in each of the first 3 year",
        "from 1980 to 2011 , how many games did apoel bc lose?; from 1980 to 2011 , how many games did apoel bc win?;",
        "When did polona hercog partner with alberta brianti?; When did polona hercog partner with stephanie vogt?",
    ]
    num_k = 3
    inds = [1, 124, 5]
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)
    examples = [TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(
        table_loader.dataset[inds[i]]['table']['caption']) for i in range(num_k)]

    examples_prompt = PromptTemplate(input_variables=["query", "table", "new_query"], template="""Query: {query}
    Sub-Table: {table}
    new_query: {new_query}""")

    examples_dict = [{"query": query_examples[i],
                      "table": examples[i],
                      "new_query": new_query_examples[i]} for i in range(num_k)]
    decompose_prompt = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""You are capable of converting complex query into sub-queries. Based on the table, provide at most 2 continuity sub-queries for knowledge that you need. 
    Split the queries with ’;’.""",
        suffix="""Query: {query}
    Sub-Table: {table}
    new_query: 
        """,
        input_variables=["query", "table"],
    )

    return decompose_prompt


def get_decompose_prompt_wiki():
    query_examples = [
        "what was the time difference between the first place finisher and the eighth place finisher?",
        "other than william stuart price, which other businessman was born in tulsa?",
        "which canadian city had the most passengers traveling from manzanillo international airport in 2013?"
    ]
    new_query_examples = [
        "what was the time for the first place finisher?; what was the time for the eighth place finisher?",
        "was william stuart price born in tulsa?; who was born in tulsa?",
        "how many passengers do each airline from canadian city have?; which canadian city had the most passengers?"
    ]
    num_k = 3
    inds = [1, 11, 86]
    table_loader = TableLoader(
        table_name='wikitable', split='validation', use_sample=True, small_test=False)
    normalised_data = [table_loader.normalize_table(
        table_loader.dataset[inds[i]]) for i in range(num_k)]
    example_samples = [TableFormat(format='none', data=normalised_data[i], save_embedding=False).get_sample_data(
        sample_type='random', query=normalised_data[i]['query']) for i in range(num_k)]
    examples = [TableFormat.format_html(
        example_samples[i], normalised_data[i]['table']['caption']) for i in range(num_k)]

    examples_prompt = PromptTemplate(input_variables=["query", "table", "new_query"], template="""Sub-Table: {table}
    Query: {query}
    Decompose query: {new_query}""")

    examples_dict = [{"query": query_examples[i],
                      "table": examples[i],
                      "new_query": new_query_examples[i]} for i in range(num_k)]
    decompose_prompt_wiki = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""You are capable of converting complex query into sub queries. Based on the table, decompose original query into at most 2 complete sub queries which can solve original query. Output new query directly.""",
        suffix="""Sub-Table: {table}
    Query: {query}
    Decompose query: """,
        input_variables=["query", "table"],
    )
    return decompose_prompt_wiki


def get_step_back_prompt_wiki():

    inds = [11, 182, 70]
    num_k = 2
    table_loader = TableLoader(
        table_name='wikitable', split='validation', use_sample=True, small_test=False)
    normalised_data = [table_loader.normalize_table(
        table_loader.dataset[inds[i]]) for i in range(num_k)]
    example_samples = [TableFormat(format='none', data=normalised_data[i], save_embedding=False).get_sample_data(
        sample_type='random', query=normalised_data[i]['query']) for i in range(num_k)]
    examples = [TableFormat.format_html(
        example_samples[i], normalised_data[i]['table']['caption']) for i in range(num_k)]
    new_query_examples = [
        # "Which country uses the US dollar as its currency and has the Federal Reserve as its central bank?",
        "which business man was born in tulsa?",
        "what is the network owned by national polytechnic institute?",
        "what districts are more populous than haridwar?"
    ]
    examples_prompt = PromptTemplate(input_variables=["query", "new_query"], template="""
    Query: {query}
    Table: {table}
    New query: {new_query}""")

    examples_dict = [{"query": table_loader.dataset[inds[i]]['question'],
                      "table": examples[i],
                      "new_query": new_query_examples[i]} for i in range(num_k)]
    step_back_prompt_wiki = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""Based on the table, your task is to step back and paraphrase a question to a more generic step-back question, which is easier to answer.""",
        suffix="""
    Query: {query}
    Table: {table}
    New query: """,
        input_variables=["query", "table"],
    )
    return step_back_prompt_wiki
