from data_loader import TableFormat, TableLoader
from langchain_openai import ChatOpenAI, OpenAI
from langchain_core.messages import HumanMessage
from langchain.prompts.prompt import PromptTemplate
from langchain.prompts.few_shot import FewShotPromptTemplate


def get_k_shot_with_answer(k: int = 1):
    sqls = [
        "SELECT MIN(points) FROM DF WHERE rider = 'roger dutton / tony wright';"]
    thoughts = ["Based on the SQL query provided, the minimum number of points that Roger Dutton / Tony Wright received in the 1972 Isle of Man TT event was 3. Therefore, the claim that 2 is the fewest points they received is false. The output should be 0."]
    tables = [
        "<table>\n<caption>1972 isle of man tt</caption>\n<thead>\n<tr><th>  MIN(points)</th></tr>\n</thead>\n<tbody>\n<tr><td>3            </td></tr>\n</tbody>\n</table>"]
    claims = ["2 be the fewest point that roger dutton / tony wright receive"]
    # inds from test split
    examples_prompt = PromptTemplate(input_variables=["SQL", "table", "claim", "thought", "output"], template="""
    SQL Excuted: 
    ```{SQL}```
    Sub-table: {table}
    Query: {claim}
    Thought: {thought}
    Output: {output}
    """)
    examples_dict = dict(zip(["SQL", "table", "claim", "thought", "output"], [
                         sqls[0], tables[0], claims[0], thoughts[0], '0']))
    prompt_template = FewShotPromptTemplate(
        examples=[examples_dict],
        example_prompt=examples_prompt,
        prefix="""Below is a sub-table generated by excuting the SQL. You need to understand the logic behind the SQL filtering and use the final subset to verify whether the provided claim/query is true or false, return 0 if it's false, or 1 if it's true. Please think step by step and only return 0 or 1 without any other information at last.""",
        suffix="""
    SQL Excuted: 
    ```{SQL}```
    Sub-table: {table}
    Query: {claim}
    Thought: """,
        input_variables=["table", "claim", "SQL"],
    )
    return prompt_template

def get_k_shot_with_aug(k: int=2):
    table_loader = TableLoader(table_name='tabfact', split='validation', use_sample=True, small_test=False)

    inds = [3, 6, 260, 33]
    Output_examples = [
                       'team, goals_for',
                       'year, game, platform_s',
                       'name, population_density_km_2_, population_2011_census_'
                       'leading_scorer, score, date']
    linking_examples = ['the team -> team; the most goal for -> goals_for',
                        'gamecube -> platform_s; gamecube game -> game; the first 3 year -> year;',
                        'alberta -> name; population density -> population_density_km_2_; 4257744 less people -> population_2011_census_; 2011 -> population_2011_census_'
                        'jason richardson -> leading_scorer; leading scorer -> score; month -> date; 23 point per game -> leading_scorer'
    ]
    examples_prompt = PromptTemplate(input_variables=["table", "claim", "output", "linking"], template=
    """
    Table: {table}
    Claim: {claim}
    Column linking: {linking}
    Columns: {output}""")
    num_k = 3
    examples_dict = [{"table": TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_nl_sep(table_loader.dataset[inds[i]]['table']['caption']),
                                        "claim": table_loader.dataset[inds[i]]['statement'],
                                        "linking": linking_examples[i],
                                        # "summary": summary_examples[i],
                                        "output": Output_examples[i]} for i in range(num_k)]
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
    #     prefix=
    #     """
    # Your task is accurately output columns related to the query or contain useful information about the query. This process involves linking similar words or semantically similar terms to columns in the table.
    # Approach this task as follows:
    # Read the question thoroughly and list every possible link from query term to column in Table.
    # Based on the column linking, output all useful columns at last. Make sure all columns in the link step are included and every column is in the Table.
    # """,
    # You are a brilliant table executor with the capabilities information retrieval, table parsing, table partition and semantic understanding who can understand the structural information of the table.
    # Given the following table and query, you should output columns related to the query or contain useful information about the query. 
    # Here are some examples:""",
        suffix=
        """
    Table: {table}
    Claim: {claim}
    Column linking:
    """,
        input_variables=["table", "claim"],
)
    return prompt_template

#添加augmention Information可能导致格式不一致，带来bias
# def get_k_shot_with_aug(k: int = 2):
#     table_loader = TableLoader(
#         table_name='tabfact', split='validation', use_sample=True, small_test=False)

#     inds = [3, 6]
#     Output_examples = [
#         'team, goals for',
#         'year, game, platform (s)']
#     examples_prompt = PromptTemplate(input_variables=["table", "claim", "output"], template="""
#     Table: {table}
#     Claim: {claim}
#     Columns: {output}""")
#     num_k = 2
#     examples_dict = [{"table": TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(table_loader.dataset[inds[i]]['table']['caption']),
#                       "claim": table_loader.dataset[inds[i]]['statement'],
#                       # "summary": summary_examples[i],
#                       "output": Output_examples[i]} for i in range(num_k)]
#     prompt_template = FewShotPromptTemplate(
#         examples=examples_dict,
#         example_prompt=examples_prompt,
#         prefix="""
#     You are a brilliant table executor with the capabilities information retrieval, table parsing, table partition and semantic understanding who can understand the structural information of the table.
#     Given the following table and query, you should output columns related to the query or contain useful information about the query.""",
#         suffix="""
#     Table: {table}
#     Claim: {claim}
#     Extra information: {aug}
#     Columns: """,
#         input_variables=["table", "claim", "aug"],
#     )
#     return prompt_template


def get_k_shot_with_string(k: int = 2):
    Output_examples = [
        # """leagues_entering_at_this_round: different league name joint with '&' or None value""",
        """
    goal: sequential number like 1, 2, 3...
    date: date in the format of Y-M-D
    venue: venue in the format of location, city, country
    score: score number in the format of X-Y
    result: result number in the format of X-Y
    competition: competition name or friendly
    nation: nation name with abbreviation within parentheses"""]
    examples_prompt = PromptTemplate(input_variables=["table", "claim", "summary", "output"], template="""
    Table: {table}
    Output: {example}""")
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=False)
    example_data = TableFormat(format='none', data=table_loader.dataset[20], use_sampling=True).data.iloc[:, [
        0, 1, 2, 3, 5]].reset_index(drop=True)
    example_data['nation'] = TableFormat(
        format='none', data=table_loader.dataset[130], use_sampling=True).data.iloc[:, 1].reset_index(drop=True)
    examples_dict = [{"table": TableFormat(format='none', data=example_data, use_sampling=True).format_html(),
                      "example": Output_examples[i]} for i in range(k)]
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""Below is a subtable with rows sampled, your task is to summarize and synthesize each column in the table, identifying commonalities in the string representations, and ultimately output string format commanalities for each column.
    The example is below:""",
        suffix="""Table: {table}""",
        input_variables=["table"],
    )
    return prompt_template


def get_k_shot_with_schema_linking(k: int = 2):
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)

    inds = [3, 6]
    Output_examples = [
        'team, goals_for',
        'year, game, platform_s']
    linking_examples = ['the team -> team; the most goal for -> goals_for',
                        'gamecube -> platform_s; gamecube game -> game; the first 3 year -> year;'
                        ]
    examples_prompt = PromptTemplate(input_variables=["table", "claim", "output", "linking"], template="""
    Table: {table}
    Claim: {claim}
    Column linking: {linking}
    Columns: {output}""")
    num_k = 2
    examples_dict = [{"table": TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(table_loader.dataset[inds[i]]['table']['caption']),
                      "claim": table_loader.dataset[inds[i]]['statement'],
                      "linking": linking_examples[i],
                      # "summary": summary_examples[i],
                      "output": Output_examples[i]} for i in range(num_k)]
    prompt_template = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""
    Your task is accurately output columns related to the query or contain useful information about the query. This process involves linking relevant columns in the table on the terms in the query.
    Approach this task as follows:
    Read the question thoroughly and list every possible link from query term to column in Table.
    Based on the linking columns, output all useful columns at last. Make sure all columns in the link step are included and every column is in the Table.
    """,
        # You are a brilliant table executor with the capabilities information retrieval, table parsing, table partition and semantic understanding who can understand the structural information of the table.
        # Given the following table and query, you should output columns related to the query or contain useful information about the query.
        # Here are some examples:""",
        suffix="""
    Table: {table}
    Claim: {claim}
    Extra information: {aug}
    """,
        input_variables=["table", "claim", "aug"],
    )
    return prompt_template


def get_step_back_prompt():
    query_examples = [
        # "the country of ecuador be the only country that use the us dollar (usd) as its currency , and the central bank be the federal reserve",
        "only 1 of the college list be public , and it be in new orleans"]
    inds = [8]
    num_k = 1
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)
    examples = [TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(
        table_loader.dataset[inds[i]]['table']['caption']) for i in range(num_k)]
    new_query_examples = [
        # "Which country uses the US dollar as its currency and has the Federal Reserve as its central bank?",
        "which college list be public?",
        #   "what is the number of listings from barrington?; what is the number of listings from farmington?; what is the number of listings from rochester combined?",
    ]
    examples_prompt = PromptTemplate(input_variables=["query", "new_query"], template="""
    Query: {query}
    Sub-Table: {table}
    new_query: {new_query}""")

    examples_dict = [{"query": query_examples[i],
                      "table": examples[i],
                      "new_query": new_query_examples[i]} for i in range(num_k)]
    step_back_prompt = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""Based on the table, your task is to step back and paraphrase a question to a more generic step-back question, which is easier to answer.""",
        suffix="""
    Query: {query}
    Sub-Table: {table}
        """,
        input_variables=["query", "table"],
    )

    return step_back_prompt


def get_decompose_prompt():
    query_examples = [
        # "after 2005 , the winner of the lifetime achievement award be andrew rule john silvester , sandra harvey lindsay simpson , marele day , shane maloney , and peter doyle",
        "all 12 club play a total of 22 game for the wru division one east",
        #   "a gamecube game loss the award in each of the first 3 year",
        "from 1980 to 2011 , apoel bc lose more than 2 time as many game as it win",
        "polona hercog 1890partner with alberta brianti after she have stephanie vogt as the partner",
    ]
    task_examples = ["query rewrite",
                     "query decompose", "query ambiguity resolve"]
    new_query_examples = [
        # "Who were the winners of the lifetime achievement award after 2005?;",
        "How many clubs play for the wru division one east in total?; How many clubs play 22 game for the wru division one east?;",
        #   "a gamecube game loss the award in each of the first 3 year",
        "from 1980 to 2011 , how many games did apoel bc lose?; from 1980 to 2011 , how many games did apoel bc win?;",
        "When did polona hercog partner with alberta brianti?; When did polona hercog partner with stephanie vogt?",
    ]
    num_k = 3
    inds = [1, 124, 5]
    table_loader = TableLoader(
        table_name='tabfact', split='validation', use_sample=True, small_test=False)
    examples = [TableFormat(format='none', data=table_loader.dataset[inds[i]], use_sampling=True).format_html(
        table_loader.dataset[inds[i]]['table']['caption']) for i in range(num_k)]

    examples_prompt = PromptTemplate(input_variables=["query", "table", "new_query"], template="""Query: {query}
    Sub-Table: {table}
    new_query: {new_query}""")

    examples_dict = [{"query": query_examples[i],
                      "table": examples[i],
                      "new_query": new_query_examples[i]} for i in range(num_k)]
    decompose_prompt = FewShotPromptTemplate(
        examples=examples_dict,
        example_prompt=examples_prompt,
        prefix="""You are capable of converting complex query into sub-queries. Based on the table, provide at most 2 continuity sub-queries for knowledge that you need. 
    Split the queries with ’;’.""",
        suffix="""Query: {query}
    Sub-Table: {table}
    new_query: 
        """,
        input_variables=["query", "table"],
    )

    return decompose_prompt

    # prompt_template = FewShotPromptTemplate(
    #     examples=examples_dict,
    #     example_prompt=examples_prompt,
    #     prefix="""
    # You are a brilliant table executor with the capabilities information retrieval, table parsing, table partition and semantic understanding who can understand the structural information of the table.
    # Given the following table and query, you should output columns related to the query.
    # Here’s how you should approach this:
    # Schema linking: link the terms in the query to the columns in the table using format #term -> #column_name
    # Columns: output columns mentioned in the schema linking process.""",
    #     suffix=
    #     """
    # Table: {table}
    # Claim: {claim}
    # Extra information: {aug}
    # """,
    # )
